// <auto-generated />
using System;
using MGP.Authentication.Persistance.Data.Tables;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MGP.Authentication.Persistance.Data.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MGP.Authentication.Persistance.Data.Tables.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Apartment")
                        .HasColumnType("text");

                    b.Property<string>("BetweenStreetOne")
                        .HasColumnType("text");

                    b.Property<string>("BetweenStreetTwo")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasPrecision(0)
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Floor")
                        .HasColumnType("text");

                    b.Property<int>("LocalityId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasPrecision(0)
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("MGP.Authentication.Persistance.Data.Tables.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasPrecision(0)
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("EmailHtml")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasPrecision(0)
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2024, 12, 10, 13, 23, 27, 271, DateTimeKind.Utc).AddTicks(3165),
                            Description = "Template de Validación de Usuario",
                            EmailHtml = "<!DOCTYPE html><html><head><meta charset='UTF-8'><style>body {font-family: Arial, sans-serif;color: #333;background-color: #f4f4f4;margin: 0;padding: 0;}.container {width: 100%;max-width: 600px;margin: auto;padding: 20px;background: #fff;border-radius: 8px;box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);}h1 {color: #0056b3;}.button {display: inline-block;padding: 10px 20px;font-size: 16px;color: #fff;background-color: #007bff;text-decoration: none;border-radius: 5px;margin-top: 20px;}.footer {margin-top: 20px;font-size: 14px;color: #777;text-align: center;}</style></head><body><div class='container'><h1>¡Hola!</h1><p>Gracias por ser parte de <strong>MDQ Digital</strong>. Para continuar accede al siguiente link</p><a href='http://localhost:5173/cuenta-exitosa/cuenta/confirmar?token={token}' class='button'>Validar</a><p>Si no solicitaste este trámite, por favor ignora este mensaje.</p><div class='footer'><p>&copy; 2024 MDQ Digital. Todos los derechos reservados.</p></div></div></body></html>"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2024, 12, 10, 13, 23, 27, 271, DateTimeKind.Utc).AddTicks(3168),
                            Description = "Template de Reseteo de Contraseña",
                            EmailHtml = "<!DOCTYPE html><html><head><meta charset='UTF-8'><style>body {font-family: Arial, sans-serif;color: #333;background-color: #f4f4f4;margin: 0;padding: 0;}.container {width: 100%;max-width: 600px;margin: auto;padding: 20px;background: #fff;border-radius: 8px;box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);}h1 {color: #0056b3;}.button {display: inline-block;padding: 10px 20px;font-size: 16px;color: #fff;background-color: #007bff;text-decoration: none;border-radius: 5px;margin-top: 20px;}.footer {margin-top: 20px;font-size: 14px;color: #777;text-align: center;}</style></head><body><div class='container'><h1>¡Hola!</h1><p><strong>Solicitaste el reseteo de tu contraseña</strong></p>Para continuar accede al siguiente link</p><a href='http://localhost:5173/account/resetpassword?token={token}' class='button'>Cambiar Password</a><p>Si no solicitaste este trámite, por favor ignora este mensaje.</p><div class='footer'><p>&copy; 2024 MDQ Digital. Todos los derechos reservados.</p></div></div></body></html>"
                        });
                });

            modelBuilder.Entity("MGP.Authentication.Persistance.Data.Tables.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasPrecision(0)
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasPrecision(0)
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Gender");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2024, 12, 10, 13, 23, 27, 271, DateTimeKind.Utc).AddTicks(3331),
                            Description = "Masculino"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2024, 12, 10, 13, 23, 27, 271, DateTimeKind.Utc).AddTicks(3333),
                            Description = "Femenino"
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2024, 12, 10, 13, 23, 27, 271, DateTimeKind.Utc).AddTicks(3334),
                            Description = "Otro"
                        });
                });

            modelBuilder.Entity("MGP.Authentication.Persistance.Data.Tables.Parent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasPrecision(0)
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasPrecision(0)
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Parent");
                });

            modelBuilder.Entity("MGP.Authentication.Persistance.Data.Tables.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreationDate")
                        .HasPrecision(0)
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<int>("GenderId")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasPrecision(0)
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("PhoneNumberId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Resident")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("DocumentNumber")
                        .IsUnique();

                    b.HasIndex("GenderId");

                    b.HasIndex("PhoneNumberId");

                    b.HasIndex("Name", "LastName")
                        .HasDatabaseName("IX_Person_FullName");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("MGP.Authentication.Persistance.Data.Tables.PhoneNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasPrecision(0)
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasPrecision(0)
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PhoneNumber");
                });

            modelBuilder.Entity("MGP.Authentication.Persistance.Data.Tables.RevokedRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasPrecision(0)
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasPrecision(0)
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RefreshToken");

                    b.ToTable("RevokedRefreshToken");
                });

            modelBuilder.Entity("MGP.Authentication.Persistance.Data.Tables.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasPrecision(0)
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("integer");

                    b.Property<int>("LevelId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasPrecision(0)
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UserStatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("PersonId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.HasIndex("UserStatusId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MGP.Authentication.Persistance.Data.Tables.UserLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasPrecision(0)
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasPrecision(0)
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("UserLevel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2024, 12, 10, 13, 23, 27, 271, DateTimeKind.Utc).AddTicks(3437),
                            Description = "Nivel 0"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2024, 12, 10, 13, 23, 27, 271, DateTimeKind.Utc).AddTicks(3438),
                            Description = "Nivel 1"
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2024, 12, 10, 13, 23, 27, 271, DateTimeKind.Utc).AddTicks(3439),
                            Description = "Nivel 2"
                        });
                });

            modelBuilder.Entity("MGP.Authentication.Persistance.Data.Tables.UserStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasPrecision(0)
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasPrecision(0)
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("UserStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2024, 12, 10, 13, 23, 27, 271, DateTimeKind.Utc).AddTicks(3539),
                            Description = "Activo"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2024, 12, 10, 13, 23, 27, 271, DateTimeKind.Utc).AddTicks(3542),
                            Description = "Inactivo"
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2024, 12, 10, 13, 23, 27, 271, DateTimeKind.Utc).AddTicks(3543),
                            Description = "Bloqueado"
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2024, 12, 10, 13, 23, 27, 271, DateTimeKind.Utc).AddTicks(3549),
                            Description = "Eliminado"
                        });
                });

            modelBuilder.Entity("MGP.Authentication.Persistance.Data.Tables.Parent", b =>
                {
                    b.HasOne("MGP.Authentication.Persistance.Data.Tables.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MGP.Authentication.Persistance.Data.Tables.Person", b =>
                {
                    b.HasOne("MGP.Authentication.Persistance.Data.Tables.Address", "Address")
                        .WithOne()
                        .HasForeignKey("MGP.Authentication.Persistance.Data.Tables.Person", "AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MGP.Authentication.Persistance.Data.Tables.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MGP.Authentication.Persistance.Data.Tables.PhoneNumber", "PhoneNumber")
                        .WithMany()
                        .HasForeignKey("PhoneNumberId");

                    b.Navigation("Address");

                    b.Navigation("Gender");

                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("MGP.Authentication.Persistance.Data.Tables.User", b =>
                {
                    b.HasOne("MGP.Authentication.Persistance.Data.Tables.UserLevel", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MGP.Authentication.Persistance.Data.Tables.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("MGP.Authentication.Persistance.Data.Tables.UserStatus", "UserStatus")
                        .WithMany()
                        .HasForeignKey("UserStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Person");

                    b.Navigation("UserStatus");
                });
#pragma warning restore 612, 618
        }
    }
}
